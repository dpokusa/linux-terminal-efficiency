#!/usr/bin/env bash
# This script was generated by bashly 0.8.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n"
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
geck_usage() {
  if [[ -n $long_usage ]]; then
    printf "geck - Sample application\n"
    echo

  else
    printf "geck - Sample application\n"
    echo

  fi

  printf "Usage:\n"
  printf "  geck [command]\n"
  printf "  geck [command] --help | -h\n"
  printf "  geck --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  objectivity   Hello Objectivity!"
  echo "  download      Download a file"
  echo "  upload        Upload a file"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  API_KEY"
    printf "    Set your API key\n"
    echo

  fi
}

# :command.usage
geck_objectivity_usage() {
  if [[ -n $long_usage ]]; then
    printf "geck objectivity - Hello Objectivity!\n"
    echo

  else
    printf "geck objectivity - Hello Objectivity!\n"
    echo

  fi

  printf "Usage:\n"
  printf "  geck objectivity [options]\n"
  printf "  geck objectivity --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --name NAME"
    printf "    instead of general hello welcome message from name delivered by this flag\n"
    echo

  fi
}

# :command.usage
geck_download_usage() {
  if [[ -n $long_usage ]]; then
    printf "geck download - Download a file\n"
    echo

  else
    printf "geck download - Download a file\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "Usage:\n"
  printf "  geck download SOURCE [TARGET] [options]\n"
  printf "  geck download --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --force, -f"
    printf "    Overwrite existing files\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SOURCE"
    printf "    URL to download from\n"
    echo

    # :argument.usage
    echo "  TARGET"
    printf "    Target filename (default: same as source)\n"
    echo
    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  DEFAULT_TARGET_LOCATION"
    printf "    Set the default location to download to\n"
    echo
    # :command.usage_examples
    printf "Examples:\n"

    printf "  cli download example.com\n"
    printf "  cli download example.com ./output -f\n"
    echo

  fi
}

# :command.usage
geck_upload_usage() {
  if [[ -n $long_usage ]]; then
    printf "geck upload - Upload a file\n"
    echo

  else
    printf "geck upload - Upload a file\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "Usage:\n"
  printf "  geck upload SOURCE [options]\n"
  printf "  geck upload --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --user, -u USER (required)"
    printf "    Username to use for logging in\n"
    echo

    # :flag.usage
    echo "  --password, -p PASSWORD"
    printf "    Password to use for logging in\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SOURCE"
    printf "    File to upload\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for (( i=0 ; i < ${#flags} ; i++ )); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*";
  else
    printf "%b\n" "$*";
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/send_completions.sh
send_completions() {
  echo $'# geck completion                                          -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_geck_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compline="${COMP_WORDS[@]:1:$COMP_CWORD-1}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'download\'*)'
  echo $'      COMPREPLY=($(compgen -W "--force --help -f -h" -- "$cur"))'
  echo $'      ;;'
  echo $''
  echo $'    \'upload\'*)'
  echo $'      COMPREPLY=($(compgen -W "--help --password --user -h -p -u" -- "$cur"))'
  echo $'      ;;'
  echo $''
  echo $'    \'d\'*)'
  echo $'      COMPREPLY=($(compgen -W "--force --help -f -h" -- "$cur"))'
  echo $'      ;;'
  echo $''
  echo $'    \'u\'*)'
  echo $'      COMPREPLY=($(compgen -W "--help --password --user -h -p -u" -- "$cur"))'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      COMPREPLY=($(compgen -W "--help --version -h -v d download u upload" -- "$cur"))'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _geck_completions geck'
  echo $''
  echo $'# ex: filetype=sh'
}

# :command.command_functions
# :command.function
geck_objectivity_command() {
  # src/objectivity_command.sh
  inspect_args

  name=${args[--name]}

  if [[ $name ]]; then
  	echo "Hello $(blue_bold Objectivity) -- $name"
  else

  	echo "Hello $(red_bold Objectivity)"
  fi
}

# :command.function
geck_download_command() {
  # src/download_command.sh
  echo "# this file is located in 'src/download_command.sh'"
  echo "# code for 'geck download' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.function
geck_upload_command() {
  # src/upload_command.sh
  echo "# this file is located in 'src/upload_command.sh'"
  echo "# code for 'geck upload' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --version | -v )
    version_command
    exit
    ;;

  --help | -h )
    long_usage=yes
    geck_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action=${1:-}

  case $action in
  -* )
    ;;

  objectivity )
    action="objectivity"
    shift
    geck_objectivity_parse_requirements "$@"
    shift $#
    ;;

  download | d )
    action="download"
    shift
    geck_download_parse_requirements "$@"
    shift $#
    ;;

  upload | u )
    action="upload"
    shift
    geck_upload_parse_requirements "$@"
    shift $#
    ;;

  # :command.command_fallback
  * )
    geck_usage
    exit 1
    ;;

  esac
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
geck_objectivity_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    geck_objectivity_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="objectivity"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --name )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--name]="$2"
        shift
        shift
      else
        printf "%s\n" "--name requires an argument: --name NAME"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      printf "invalid argument: %s\n" "$key"
      exit 1
      ;;

    esac
  done
  # :command.required_args_filter
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
geck_download_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    geck_download_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="download"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --force | -f )
      # :flag.conflicts
      # :flag.case_no_arg
      args[--force]=1
      shift
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[source]+x} ]]; then
        # :argument.validations
        args[source]=$1
        shift
      elif [[ -z ${args[target]+x} ]]; then
        # :argument.validations
        args[target]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[source]+x} ]]; then
    printf "missing required argument: SOURCE\nusage: geck download SOURCE [TARGET] [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.parse_requirements
geck_upload_parse_requirements() {
  # :command.fixed_flags_filter
  case "${1:-}" in
  --help | -h )
    long_usage=yes
    geck_upload_usage
    exit
    ;;

  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="upload"
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --user | -u )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--user]="$2"
        shift
        shift
      else
        printf "%s\n" "--user requires an argument: --user, -u USER"
        exit 1
      fi
      ;;

    # :flag.case
    --password | -p )
      # :flag.conflicts
      # :flag.case_arg
      if [[ -n ${2+x} ]]; then
        # :flag.validations
        args[--password]="$2"
        shift
        shift
      else
        printf "%s\n" "--password requires an argument: --password, -p PASSWORD"
        exit 1
      fi
      ;;

    -?* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;

    * )
      # :command.parse_requirements_case
      # :command.parse_requirements_case_simple
      if [[ -z ${args[source]+x} ]]; then
        # :argument.validations
        args[source]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;

    esac
  done
  # :command.required_args_filter
  if [[ -z ${args[source]+x} ]]; then
    printf "missing required argument: SOURCE\nusage: geck upload SOURCE [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  if [[ -z ${args[--user]+x} ]]; then
    printf "missing required flag: --user, -u USER\n"
    exit 1
  fi
  # :command.catch_all_filter
  # :command.default_assignments
  # :command.whitelist_filter
  # :command.user_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  if [[ $action == "objectivity" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      geck_objectivity_usage
    else
      geck_objectivity_command
    fi

  elif [[ $action == "download" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      geck_download_usage
    else
      geck_download_command
    fi

  elif [[ $action == "upload" ]]; then
    if [[ ${args[--help]:-} ]]; then
      long_usage=yes
      geck_upload_usage
    else
      geck_upload_command
    fi

  elif [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
